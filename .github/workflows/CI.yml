name: CI

on:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - '*'

permissions:
  contents: read
  id-token: write

jobs:
  phpunit:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        php-version:
          - '8.0'
          - '8.1'
          - '8.2'
          - '8.3'
          - '8.4'
        db-type:
          - mysql
          - mysql80
          - pgsql
          - sqlite
          - sqlsrv

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
      memcached:
        image: memcached
        ports:
          - 11211:11211

    env:
      DB: ${{ matrix.db-type }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Start MySQL 5.6
        if: matrix.db-type == 'mysql'
        run: |
          docker run -d --name mysql56 \
            -e MYSQL_ROOT_PASSWORD=root \
            -e MYSQL_DATABASE=cakephp_test \
            -p 3306:3306 \
            -v ${{ github.workspace }}/docker/mysql:/docker-entrypoint-initdb.d:ro \
            --health-cmd="mysqladmin ping" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=3 \
            mysql:5.6

      - name: Start MySQL 8.0
        if: matrix.db-type == 'mysql80'
        run: |
          docker run -d --name mysql80 \
            -e MYSQL_ROOT_PASSWORD=root \
            -e MYSQL_DATABASE=cakephp_test \
            -p 3307:3306 \
            -v ${{ github.workspace }}/docker/mysql:/docker-entrypoint-initdb.d:ro \
            --health-cmd="mysqladmin ping" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=3 \
            mysql:8.0

      - name: Start PostgreSQL 9.4
        if: matrix.db-type == 'pgsql'
        run: |
          docker run -d --name postgres94 \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_DB=cakephp_test \
            -p 5432:5432 \
            -v ${{ github.workspace }}/docker/pgsql:/docker-entrypoint-initdb.d:ro \
            --health-cmd="pg_isready" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=5 \
            postgres:9.4

      - name: Start SQL Server 2022
        if: matrix.db-type == 'sqlsrv'
        run: |
          docker run -d --name sqlsrv2022 \
            -e ACCEPT_EULA=Y \
            -e MSSQL_SA_PASSWORD=Password123! \
            -e MSSQL_PID=Developer \
            -p 1433:1433 \
            -v ${{ github.workspace }}/docker/sqlsrv:/docker-entrypoint-initdb.d:ro \
            --entrypoint /docker-entrypoint-initdb.d/docker-entrypoint.sh \
            --health-cmd="/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'Password123!' -Q 'SELECT 1' -C -No" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=5 \
            mcr.microsoft.com/mssql/server:2022-latest

      - name: Install Microsoft ODBC Driver for SQL Server
        if: matrix.db-type == 'sqlsrv'
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y curl gnupg
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y DEBIAN_FRONTEND=noninteractive apt-get install -y msodbcsql18

      - name: Install PHP with extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: apcu, memcache, memcached, redis, mcrypt, pdo_mysql, pdo_pgsql, pdo_sqlite, pdo_sqlsrv
          ini-values: |
            apc.enable_cli=1
          coverage: xdebug

      - name: Enable Autoload
        run: echo "require_once dirname(__DIR__, 2) . DS . 'vendors/autoload.php';" >> app/Config/bootstrap.php

      - name: locale-gen
        run: |
          sudo locale-gen de_DE;
          sudo locale-gen es_ES;

      - name: Make temporary directories writable
        run: chmod -R 777 ./app/tmp

      - name: Composer get cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php${{ matrix.php-version }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: |
            ${{ runner.os }}-php${{ matrix.php-version }}-composer-

      - name: Install Composer Packages
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Copy database.php
        run: cp ./lib/Cake/Test/Config/database.php ./app/Config/

      - name: Setup problem matchers for PHPUnit
        run: echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

      - name: Run Tests
        run: ./vendors/bin/phpunit --coverage-clover coverage.xml --log-junit junit.xml --colors=always

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          use_oidc: true
          file: ./junit.xml
          flags: php${{ matrix.php-version }}-${{ matrix.db-type }}
          name: PHP ${{ matrix.php-version }} - ${{ matrix.db-type }}

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          use_oidc: true
          flags: php${{ matrix.php-version }}-${{ matrix.db-type }}
          name: PHP ${{ matrix.php-version }} - ${{ matrix.db-type }}

      - name: Stop MySQL 5.6
        if: always() && matrix.db-type == 'mysql'
        run: docker stop mysql56 && docker rm mysql56 || true

      - name: Stop MySQL 8.0
        if: always() && matrix.db-type == 'mysql80'
        run: docker stop mysql80 && docker rm mysql80 || true

      - name: Stop PostgreSQL 9.4
        if: always() && matrix.db-type == 'pgsql'
        run: docker stop postgres94 && docker rm postgres94 || true

      - name: Stop SQL Server 2022
        if: always() && matrix.db-type == 'sqlsrv'
        run: docker stop sqlsrv2022 && docker rm sqlsrv2022 || true

  phpcs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          coverage: none
          tools: cs2pr

      - name: Composer get cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php8.4-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: |
            ${{ runner.os }}-php8.4-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Check PHP code style
        id: phpcs
        run: ./vendors/bin/phpcs --report-full --report-checkstyle=./phpcs-report.xml

      - name: Show PHPCS results in PR
        if: ${{ always() && steps.phpcs.outcome == 'failure' }}
        run: cs2pr ./phpcs-report.xml
